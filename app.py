import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Carregando os arquivos salvos
knn = joblib.load("modelo_knn.pkl")
scaler = joblib.load("scaler.pkl")
colunas_modelo = joblib.load("colunas_modelo.pkl")

# Mapas para exibi√ß√£o e valores reais
mapa_cor_raca = {
    "N√£o declarado": 0,
    "Branca": 1,
    "Preta": 2,
    "Parda": 3,
    "Amarela": 4,
    "Ind√≠gena": 5,
    "N√£o disp√µe da informa√ß√£o": 6
}

mapa_tp_escola = {
    "N√£o respondeu": 1,
    "P√∫blica": 2,
    "Privada": 3
}

mapa_q002 = {
    "Nunca estudou": "A",
    "N√£o completou a 4¬™ s√©rie/5¬∫ ano do EF": "B",
    "Completou a 4¬™ s√©rie/5¬∫ ano, mas n√£o completou a 8¬™ s√©rie/9¬∫ ano do EF": "C",
    "Completou a 8¬™ s√©rie/9¬∫ ano do EF, mas n√£o completou o EM": "D",
    "Completou o EM, mas n√£o completou a Faculdade": "E",
    "Completou a Faculdade, mas n√£o completou a P√≥s-gradua√ß√£o": "F",
    "Completou a P√≥s-gradua√ß√£o": "G",
    "N√£o sei": "H"
}

mapa_q006 = {
    "Nenhuma Renda": "A",
    "At√© R$ 1.320,00": "B",
    "De R$ 1.320,01 at√© R$ 1.980,00": "C",
    "De R$ 1.980,01 at√© R$ 2.640,00": "D",
    "De R$ 2.640,01 at√© R$ 3.300,00": "E",
    "De R$ 3.300,01 at√© R$ 3.960,00": "F",
    "De R$ 3.960,01 at√© R$ 5.280,00": "G",
    "De R$ 5.280,01 at√© R$ 6.600,00": "H",
    "De R$ 6.600,01 at√© R$ 7.920,00": "I",
    "De R$ 7.920,01 at√© R$ 9.240,00": "J",
    "De R$ 9.240,01 at√© R$ 10.560,00": "K",
    "De R$ 10.560,01 at√© R$ 11.880,00": "L",
    "De R$ 11.880,01 at√© R$ 13.200,00": "M",
    "De R$ 13.200,01 at√© R$ 15.840,00": "N",
    "De R$ 15.840,01 at√© R$19.800,00": "O",
    "De R$ 19.800,01 at√© R$ 26.400,00": "P",
    "Acima de R$ 26.400,00": "Q"
}

# T√≠tulo e descri√ß√£o
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üéØ Previs√£o de Notas do ENEM</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Insira os dados de um(a) aluno(a) para prever suas notas nas √°reas do conhecimento com base em dados reais do ENEM 2023.</p>", unsafe_allow_html=True)
st.markdown("---")

# Formul√°rio com campos amig√°veis
cor_raca_legivel = st.selectbox("Cor/Ra√ßa", list(mapa_cor_raca.keys()))
tipo_escola = st.selectbox("Tipo de Escola", list(mapa_tp_escola.keys()))
uf_prova = st.selectbox("UF da Prova", [
    "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS",
    "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC",
    "SP", "SE", "TO"
])
q002 = st.selectbox("Escolaridade do Respons√°vel", list(mapa_q002.keys()))
q006 = st.selectbox("Renda Familiar", list(mapa_q006.keys()))

# Bot√£o para previs√£o
if st.button("üìä Prever Notas"):
    # Traduz o valor escolhido pelo usu√°rio para o c√≥digo num√©rico
    cor_raca = mapa_cor_raca[cor_raca_legivel]

    # Criar DataFrame com os dados inseridos
    novo_aluno = pd.DataFrame([{
        'TP_COR_RACA': cor_raca,
        'TP_ESCOLA': mapa_tp_escola[tipo_escola],
        'SG_UF_PROVA': uf_prova,
        'Q002': mapa_q002[q002],
        'Q006': mapa_q006[q006]
    }])

    # Pr√©-processamento
    novo_aluno_encoded = pd.get_dummies(novo_aluno)
    novo_aluno_encoded = novo_aluno_encoded.reindex(columns=colunas_modelo, fill_value=0)
    novo_aluno_normalized = scaler.transform(novo_aluno_encoded)

    # Previs√£o
    notas_previstas = knn.predict(novo_aluno_normalized)

    # Obtem os √≠ndices dos vizinhos mais pr√≥ximos
    distances, indices = knn.kneighbors(novo_aluno_normalized)
    # Obtemos os dados de sa√≠da usados no treinamento do modelo
    y_train = pd.DataFrame(knn._y, columns=['CN', 'CH', 'LC', 'MT', 'Redacao'])
    notas_vizinhos = y_train.iloc[indices[0]]

    st.markdown("---")
    st.success("‚úÖ Previs√£o realizada com sucesso!")

    st.subheader("üìà Notas Previstas:")

    col_nomes = ['Ci√™ncias da Natureza', 'Ci√™ncias Humanas', 'Linguagens', 'Matem√°tica', 'Reda√ß√£o']
    for i, area in enumerate(col_nomes):
        nota_prevista = notas_previstas[0][i]
        notas_vizinhos_disciplina = notas_vizinhos.iloc[:, i]

        menor = sum(nota_prevista < notas_vizinhos_disciplina)
        igual = sum(nota_prevista == notas_vizinhos_disciplina)
        maior = sum(nota_prevista > notas_vizinhos_disciplina)

        if maior > menor and maior > igual:
            comparativo = "acima da maioria dos vizinhos"
        elif menor > maior and menor > igual:
            comparativo = "abaixo da maioria dos vizinhos"
        elif igual >= maior and igual >= menor:
            comparativo = "igual √† maioria dos vizinhos"
        else:
            comparativo = "sem diferen√ßa significativa em rela√ß√£o aos vizinhos"

        emoji = "üß™" if "Natureza" in area else "üìú" if "Humanas" in area else "üìù" if "Reda√ß√£o" in area else "üî¢" if "Matem√°tica" in area else "üìö"
        st.markdown(f"{emoji} **{area}**: `{nota_prevista:.1f}` ‚Äî {comparativo}")
